/*
 * CaseSelectionDialog.java
 *
 * Created on Apr 14, 2012, 1:39:48 PM
 */

package de.sofd.iirkit;

import de.sofd.iirkit.service.Case;
import de.sofd.iirkit.service.IirService;
import de.sofd.iirkit.service.User;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.commons.lang.StringUtils;
import org.jdesktop.application.Action;

/**
 * Initialized with a user, displays all cases of that user. One of
 * them may be selected, either interactively or programmatically.
 * The selected case is available under {@link #getSelectedCase() }
 * at all times; when it changes (by any means), {@link #addSelectedCaseChangeListener(java.beans.PropertyChangeListener) }
 * is fired.
 *
 * @author olaf
 */
public class CaseSelectionDialog extends javax.swing.JDialog {

    private final User user;
    private final IirService iirSvc;
    public final static String PROP_SELECTED_CASE = "selectedCase";
    private final List<ChangeListener> closedListeners = new ArrayList<ChangeListener>();

    /** Creates new form CaseSelectionDialog */
    public CaseSelectionDialog(java.awt.Frame parent, User user, IirService iirSvc) {
        super(parent, false);
        this.user = user;
        this.iirSvc = iirSvc;
        initComponents();

        DefaultListModel listModel = new DefaultListModel();
        for (Case c: iirSvc.getCasesOf(user)) {
            listModel.addElement(c);
        }
        //TODO: multi-user operation / react to outside case changes?
        caseList.setModel(listModel);
        caseList.setCellRenderer(cellRenderer);
        final Case[] lastSelectedCase = {null};
        caseList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    Case c = (Case) caseList.getSelectedValue();
                    if (c != lastSelectedCase[0]) {
                        firePropertyChange(PROP_SELECTED_CASE, lastSelectedCase[0], c);
                        lastSelectedCase[0] = c;
                    }
                }
            }
        });
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                fireClosed();
            }
        });
        setTitle(StringUtils.substringBefore(getTitle(), "-") + "- " + user.getName());
    }

    public Case getSelectedCase() {
        return (Case) caseList.getSelectedValue();
    }

    public void setSelectedCase(Case c) {
        int n = caseList.getModel().getSize();
        for (int i = 0; i < n; i++) {
            Case c2 = (Case) caseList.getModel().getElementAt(i);
            if (c.getNumber() == c2.getNumber()) {
                caseList.setSelectedIndex(i);
                return;
            }
        }
        caseList.setSelectedIndex(-1);
    }

    public void addSelectedCaseChangeListener(PropertyChangeListener l) {
        addPropertyChangeListener(PROP_SELECTED_CASE, l);
    }

    public void addClosedListener(ChangeListener l) {
        closedListeners.add(l);
    }

    protected void fireClosed() {
        for (ChangeListener l : closedListeners) {
            l.stateChanged(new ChangeEvent(this));
        }
    }

    private ListCellRenderer cellRenderer = new DefaultListCellRenderer() {
        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {
            DefaultListCellRenderer result = (DefaultListCellRenderer) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            Case c = (Case) value;
            result.setText("" + c.getNumber() + (c.getResult() != null ? " (done)" : ""));
            return result;
        }
    };


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        caseList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.sofd.iirkit.App.class).getContext().getResourceMap(CaseSelectionDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(de.sofd.iirkit.App.class).getContext().getActionMap(CaseSelectionDialog.class, this);
        exitButton.setAction(actionMap.get("close")); // NOI18N
        exitButton.setText(resourceMap.getString("exitButton.text")); // NOI18N
        exitButton.setName("exitButton"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        caseList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        caseList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        caseList.setName("caseList"); // NOI18N
        jScrollPane1.setViewportView(caseList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(exitButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exitButton)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void close() {
        setVisible(false);
        fireClosed();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList caseList;
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
